{"message":"failed to resolve: use of undeclared crate or module `zip`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":388,"byte_end":391,"line_start":21,"line_end":21,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"    let mut archive = zip::ZipArchive::new(file).unwrap();","highlight_start":23,"highlight_end":26}],"label":"use of undeclared crate or module `zip`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `zip`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:21:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut archive = zip::ZipArchive::new(file).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `zip`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":430,"byte_end":1740,"line_start":23,"line_end":67,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    for i in 0..archive.len()","highlight_start":5,"highlight_end":30},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        let mut file = archive.by_index(i).unwrap();","highlight_start":1,"highlight_end":53},{"text":"        let outpath = match file.enclosed_name()","highlight_start":1,"highlight_end":49},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            Some(path) => path.to_owned(),","highlight_start":1,"highlight_end":43},{"text":"            None => continue,","highlight_start":1,"highlight_end":30},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            let comment = file.comment();","highlight_start":1,"highlight_end":42},{"text":"            if !comment.is_empty()","highlight_start":1,"highlight_end":35},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                println!(\"File {} comment: {}\", i, comment);","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if(*file.name()).ends_with('/')","highlight_start":1,"highlight_end":40},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            println!(\"File {} extracted to \\\"{}\\\"\", i, outpath.display());","highlight_start":1,"highlight_end":75},{"text":"            fs::create_dir_all(&outpath).unwrap();","highlight_start":1,"highlight_end":51},{"text":"        } else ","highlight_start":1,"highlight_end":16},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            println!(\"File {} extracted to \\\"{}\\\" ({} bytes)\", i, outpath.display(), file.size());","highlight_start":1,"highlight_end":99},{"text":"            if let Some(p) = outpath.parent()","highlight_start":1,"highlight_end":46},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                if !p.exists()","highlight_start":1,"highlight_end":31},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    fs::create_dir_all(&p).unwrap();","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut outfile = fs::File::create(&outpath).unwrap();","highlight_start":1,"highlight_end":67},{"text":"            io::copy(&mut file, &mut outfile).unwrap();","highlight_start":1,"highlight_end":56},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(unix)]","highlight_start":1,"highlight_end":21},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use std::os::unix::fs::PermissionsExt;","highlight_start":1,"highlight_end":51},{"text":"            if let Some(mode) = file.unix_mode()","highlight_start":1,"highlight_end":49},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                fs::set_permissions(&outpath, fs::Permissions::from_mode(mode)).unwrap();","highlight_start":1,"highlight_end":90},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"expected `i32`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":430,"byte_end":1740,"line_start":23,"line_end":67,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    for i in 0..archive.len()","highlight_start":5,"highlight_end":30},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        let mut file = archive.by_index(i).unwrap();","highlight_start":1,"highlight_end":53},{"text":"        let outpath = match file.enclosed_name()","highlight_start":1,"highlight_end":49},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            Some(path) => path.to_owned(),","highlight_start":1,"highlight_end":43},{"text":"            None => continue,","highlight_start":1,"highlight_end":30},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            let comment = file.comment();","highlight_start":1,"highlight_end":42},{"text":"            if !comment.is_empty()","highlight_start":1,"highlight_end":35},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                println!(\"File {} comment: {}\", i, comment);","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if(*file.name()).ends_with('/')","highlight_start":1,"highlight_end":40},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            println!(\"File {} extracted to \\\"{}\\\"\", i, outpath.display());","highlight_start":1,"highlight_end":75},{"text":"            fs::create_dir_all(&outpath).unwrap();","highlight_start":1,"highlight_end":51},{"text":"        } else ","highlight_start":1,"highlight_end":16},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            println!(\"File {} extracted to \\\"{}\\\" ({} bytes)\", i, outpath.display(), file.size());","highlight_start":1,"highlight_end":99},{"text":"            if let Some(p) = outpath.parent()","highlight_start":1,"highlight_end":46},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                if !p.exists()","highlight_start":1,"highlight_end":31},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    fs::create_dir_all(&p).unwrap();","highlight_start":1,"highlight_end":53},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut outfile = fs::File::create(&outpath).unwrap();","highlight_start":1,"highlight_end":67},{"text":"            io::copy(&mut file, &mut outfile).unwrap();","highlight_start":1,"highlight_end":56},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(unix)]","highlight_start":1,"highlight_end":21},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use std::os::unix::fs::PermissionsExt;","highlight_start":1,"highlight_end":51},{"text":"            if let Some(mode) = file.unix_mode()","highlight_start":1,"highlight_end":49},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                fs::set_permissions(&outpath, fs::Permissions::from_mode(mode)).unwrap();","highlight_start":1,"highlight_end":90},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":97,"byte_end":100,"line_start":9,"line_end":9,"column_start":19,"column_end":22,"is_primary":false,"text":[{"text":"fn real_main() -> i32 ","highlight_start":19,"highlight_end":22}],"label":"expected `i32` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:23:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mfn real_main() -> i32 \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `i32` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for i in 0..archive.len()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut file = archive.by_index(i).unwrap();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let outpath = match file.enclosed_name()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `i32`, found `()`\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0308, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
